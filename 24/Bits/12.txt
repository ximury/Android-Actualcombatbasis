@Override
public IBinder onBind(Intent intent) {
return null;
}

@Override
public void onCreate() {
super.onCreate();
   Log.e(TAG, "后台服务开始");
FLAG = true;								//标记为服务正在运行
// 创建监听器类，实例化监听对象
detector = new StepDetector(this);			//实例化传感器对象
detector.walk = 1;							//设置步数从一开始
// 获取传感器的服务，初始化传感器
mSensorManager = (SensorManager) this.getSystemService(SENSOR_SERVICE);
// 注册传感器，注册监听器
mSensorManager.registerListener(detector,
mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),
         SensorManager.SENSOR_DELAY_NORMAL);

// 电源管理服务
mPowerManager = (PowerManager) this
.getSystemService(Context.POWER_SERVICE);
mWakeLock = mPowerManager.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK
| PowerManager.ACQUIRE_CAUSES_WAKEUP, "S");
//保持设备状态
mWakeLock.acquire();

//设置一个定时服务
alarmManager = (AlarmManager) getSystemService(ALARM_SERVICE);
calendar = Calendar.getInstance();
calendar.setTimeZone(TimeZone.getTimeZone("GMT+8"));
calendar.setTimeInMillis(System.currentTimeMillis());
calendar.set(Calendar.HOUR_OF_DAY, 23);			//设置时
calendar.set(Calendar.MINUTE, 59);				//设置分
calendar.set(Calendar.SECOND, 0);				//设置秒
calendar.set(Calendar.MILLISECOND, 0);			//设置毫秒
intent = new Intent(this,FunctionBroadcastReceiver.class);//发送广播的意图
intent.setAction(alarmSaveService);				//设置Action
pendingIntent = PendingIntent.getBroadcast(this, 1, intent,
         PendingIntent.FLAG_UPDATE_CURRENT);
//设置定时器
alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP,
calendar.getTimeInMillis(), AlarmManager.INTERVAL_DAY, pendingIntent);
}
